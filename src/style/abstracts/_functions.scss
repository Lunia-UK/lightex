@use "sass:map";

// Convert px to rem
@function toRem($value) {
    $remValue: ($value / 16) + rem; 
    @return $remValue;
}

@each $theme-name, $properties in $tokens {
    html[data-theme="#{$theme-name}"] {
      @each $name, $property in $properties {
        --#{$name}: #{$property};
      }
    }
}

@function get-color($color-key) {
    $color: map-deep-get($tokens, $theme, $color-key);
    @return var(--#{$color-key});
}


@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

@mixin get-svg-mask($svg-key, $color-key){
    background-color: var(--#{$color-key});
    $svg-value: map-get($svg, $svg-key);    
    mask-image: svg-url($svg-value);
    -webkit-mask-image: svg-url($svg-value);
    -webkit-mask-size: cover;
    -webkit-mask-repeat: no-repeat;
}


@function svg-url($svg){
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);     
        $chunk: str-replace($chunk,'"','\'');
        $chunk: str-replace($chunk,'<','%3C');
        $chunk: str-replace($chunk,'>','%3E');
        $chunk: str-replace($chunk,'&','%26');
        $chunk: str-replace($chunk,'#','%23');       
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice; 
    }

    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");   
}       
            
//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search); 
    @if $index { 
        @return str-slice($string, 1, $index - 1) + $replace + 
            str-replace(str-slice($string, $index + 
            str-length($search)), $search, $replace); 
    }
    @return $string; 
}